# version 410 core

layout (points) in;
layout (triangle_strip, max_vertices = 4) out;

uniform float tileSize = 0.1;
uniform mat4 global_rotation = mat4(1);
uniform mat4 ortho = mat4(1);

in int axis[];
in vec2 tex[];
// in mat4 individual_trans[];

out vec2 tex_coord;

void emit();

void main() {
	float eps = 1e-4; vec4 pos = gl_in[0].gl_Position;
	switch (axis[0]) {
	case 0:
		gl_Position = vec4(pos.x, pos.y + tileSize, pos.z + tileSize, pos.w);
		tex_coord = vec2(tex[0].x + tileSize, tex[0].y + tileSize);
		emit();

		gl_Position = vec4(pos.x, pos.y + tileSize, pos.z - tileSize, pos.w);
		tex_coord = vec2(tex[0].x + tileSize, tex[0].y - tileSize);
		emit();

		gl_Position = vec4(pos.x, pos.y - tileSize, pos.z + tileSize, pos.w);
		tex_coord = vec2(tex[0].x - tileSize, tex[0].y + tileSize);
		emit();

		gl_Position = vec4(pos.x, pos.y - tileSize, pos.z - tileSize, pos.w);
		tex_coord = vec2(tex[0].x - tileSize, tex[0].y - tileSize);
		emit();

		break;
	case 1:
		gl_Position = vec4(pos.x + tileSize, pos.y, pos.z + tileSize, pos.w);
		tex_coord = vec2(tex[0].x + tileSize, tex[0].y + tileSize);
		emit();

		gl_Position = vec4(pos.x + tileSize, pos.y, pos.z - tileSize, pos.w);
		tex_coord = vec2(tex[0].x + tileSize, tex[0].y - tileSize);
		emit();

		gl_Position = vec4(pos.x - tileSize, pos.y, pos.z + tileSize, pos.w);
		tex_coord = vec2(tex[0].x - tileSize, tex[0].y + tileSize);
		emit();

		gl_Position = vec4(pos.x - tileSize, pos.y, pos.z - tileSize, pos.w);
		tex_coord = vec2(tex[0].x - tileSize, tex[0].y - tileSize);
		emit();

		break;
	case 2:
		gl_Position = vec4(pos.x + tileSize, pos.y + tileSize, pos.zw);
		tex_coord = vec2(tex[0].x + tileSize, tex[0].y + tileSize);
		emit();

		gl_Position = vec4(pos.x + tileSize, pos.y - tileSize, pos.zw);
		tex_coord = vec2(tex[0].x + tileSize, tex[0].y - tileSize);
		emit();

		gl_Position = vec4(pos.x - tileSize, pos.y + tileSize, pos.zw);
		tex_coord = vec2(tex[0].x - tileSize, tex[0].y + tileSize);
		emit();

		gl_Position = vec4(pos.x - tileSize, pos.y - tileSize, pos.zw);
		tex_coord = vec2(tex[0].x - tileSize, tex[0].y - tileSize);
		emit();
		break;
	}
	EndPrimitive();
}

void emit() {
	gl_Position = global_rotation * gl_Position;
	EmitVertex();
}